#include "gcode_gen/writer.hpp"
#include <sstream>
#include <ctime>
#include <iomanip>

namespace gcode_gen {

Writer::Writer(const PlannerSettings& settings) : ps_(settings) {}

std::vector<std::string> Writer::write(const std::vector<Waypoint>& wps) {
    std::vector<std::string> out;
    if (wps.empty()) return out;
    out.push_back(write_header());
    bool tool_state = false;
    for (size_t i=0;i<wps.size();++i) {
        const auto& wp = wps[i];
        if (wp.has_tool && wp.tool_down!=tool_state) {
            tool_state = wp.tool_down;
            out.push_back(tool_state?"M3 S1":"M3 S0");
        }
        double x = wp.lat;
        double y = wp.lon;
        double feed = ps_.feed_work;
        out.push_back(write_move(x,y,feed));
    }
    out.push_back(write_footer());
    return out;
}

std::string Writer::write_header() {
    std::ostringstream ss;
    ss << "; Generated by Tractobots Planner Qt";
    ss << "\n" << (ps_.incremental?"G91":"G90");
    ss << "\n" << ps_.plane;
    if (ps_.coord_system>=54 && ps_.coord_system<=59) {
        ss << "\nG" << ps_.coord_system;
        if (ps_.offset_x!=0.0 || ps_.offset_y!=0.0)
            ss << "\nG10 L2 P" << (ps_.coord_system-53)
               << " X" << ps_.offset_x << " Y" << ps_.offset_y;
    }
    return ss.str();
}

std::string Writer::write_footer() {
    return "M30";
}

std::string Writer::write_move(double x, double y, double feed) {
    std::ostringstream ss;
    ss.setf(std::ios::fixed); ss.precision(3);
    if (ps_.incremental) {
        double dx = first_move_? x-last_x_ : x-last_x_;
        double dy = first_move_? y-last_y_ : y-last_y_;
        ss << "G1 X" << dx << " Y" << dy << " F" << feed;
    } else {
        ss << "G1 X" << x << " Y" << y << " F" << feed;
    }
    last_x_ = x; last_y_ = y; first_move_ = false;
    return ss.str();
}

std::string Writer::write_arc(double x,double y,double i,double j,double feed){
    std::ostringstream ss; ss.setf(std::ios::fixed); ss.precision(3);
    ss << "G2 X"<<x<<" Y"<<y<<" I"<<i<<" J"<<j<<" F"<<feed; return ss.str();
}

} // namespace gcode_gen
